// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  salt      String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trackOutSheet Json[]

  answerEmbeddings AnswerEmbedding[]

  useComplementary Boolean @default(true) // Describes if the co-founder should be complementary or similar

  similaritiesAsUser1 Similarity[] @relation("User1")
  similaritiesAsUser2 Similarity[] @relation("User2")

  sentRequests     Request[] @relation("SenderUser")
  receivedRequests Request[] @relation("ReceivingUser")
}

model AnswerEmbedding {
  id             Int      @id @default(autoincrement())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  answer         String
  question       String
  questionNumber Int
  embedding      Float[]
  createdAt      DateTime @default(now())

  @@unique([userId, questionNumber])
}

model Similarity {
  id         Int    @id @default(autoincrement())
  user1Email String
  user2Email String

  similarityScores Float[]

  // Relationships
  user1 User @relation("User1", fields: [user1Email], references: [email])
  user2 User @relation("User2", fields: [user2Email], references: [email])

  createdAt DateTime @default(now())

  // Ensure unique pairs of users
  @@unique([user1Email, user2Email])
}

enum STATUS {
  ACCEPTED
  PENDING
  DECLINED
}

model Request {
  id                 String @id @default(cuid())
  status             STATUS @default(PENDING)
  senderUserEmail    String
  receivingUserEmail String
  senderUser         User   @relation("SenderUser", fields: [senderUserEmail], references: [email])
  receivingUser      User   @relation("ReceivingUser", fields: [receivingUserEmail], references: [email])
}
